Program([
	FuncDecl(addBinary, StringType, [Param(a, StringType), Param(b, StringType)], None, BlockStmt([VarDecl(ans, StringType), VarDecl(carry, IntegerType, IntegerLit(0)), VarDecl(i, FloatType, BinExpr(::, Id(a), BinExpr(-, FuncCall(length, []), IntegerLit(1)))), VarDecl(j, FloatType, BinExpr(::, Id(b), BinExpr(-, FuncCall(length, []), IntegerLit(1)))), WhileStmt(BinExpr(>=, Id(i), BinExpr(||, BinExpr(||, IntegerLit(0), BinExpr(>=, Id(j), IntegerLit(0))), Id(carry))), BlockStmt([IfStmt(BinExpr(>=, Id(i), IntegerLit(0)), AssignStmt(Id(carry), BinExpr(-, BinExpr(+, Id(carry), ArrayCell(a, [BinExpr(-, Id(i), IntegerLit(1))])), StringLit(0)))), IfStmt(BinExpr(>=, Id(j), IntegerLit(0)), AssignStmt(Id(carry), BinExpr(-, BinExpr(+, Id(carry), ArrayCell(b, [BinExpr(-, Id(j), IntegerLit(1))])), StringLit(0)))), AssignStmt(Id(ans), BinExpr(+, BinExpr(+, Id(ans), BinExpr(%, Id(carry), IntegerLit(2))), StringLit(0))), AssignStmt(Id(carry), BinExpr(/, Id(carry), IntegerLit(2)))])), CallStmt(reverse, FuncCall(begin, [Id(ans)]), FuncCall(end, [Id(ans)])), ReturnStmt(Id(ans))]))
])